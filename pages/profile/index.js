import React, { useState } from "react";
import { getSession } from "next-auth/react";
import instance from "../../servee";
import {
  HStack,
  Text,
  Button,
  Divider,
  VStack,
  Flex,
  Image,
  useDisclosure,
} from "@chakra-ui/react";

import { api_origin } from "../../constraint";
import Head from "next/head";
import EditProfile from "../../components/edit_profile";
// import PostContent from "../../components/postContent";
import FeedContent from "../../components/FeedContent";
import NextLink from "next/link";

function profile(props) {
  // console.log({ props: props.user });
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { allPost, allPostedLength } = props;
  // console.log(allPost);

  // prop.user = [{user_Id: 26, username: 'weltqaz', email: 'rafilt3@gmail.com', profilepicture: null, Fullname: 'Kondisi Tolong Pantau'}]
  const [user, setUser] = useState(props.user);
  const { username, email, Fullname, profilepicture, Bio } = user;
  const [Ava, setAva] = useState({});
  const [imagesrc, setImagesrc] = useState(api_origin + profilepicture);

  // buat get content
  const [content, setContent] = useState(allPost);
  const [ofset, setOfSet] = useState(1);
  const [caption, setCaption] = useState();

  // buat ngerubah si ava
  const onFileAvachange = (event) => {
    // console.log(event);
    setAva(event.target.files[0]);
    setImagesrc(URL.createObjectURL(event.target.files[0]));
  };

  // nyimpen perubahan
  const onSaveAvaChange = async () => {
    try {
      const session = await getSession();
      const { token } = session.user;

      //alur masuk si file data image
      const body = new FormData();
      body.append("ava", Ava);
      // bawa token
      const config = {
        headers: { Authorization: `Bearer ${token}` },
      };
      const responsPatchAva = await instance.patch(
        "/user/profileupdateAva",
        body,
        config
      );
      alert(responsPatchAva.data.message);
    } catch (error) {
      console.log({ error });
      alert(error.response.data.message);
    }
  };

  // buat ngerubah data user
  const onSaveDataUser = async (body) => {
    try {
      const session = await getSession();
      const { token } = session.user;

      const config = {
        headers: { Authorization: `Bearer ${token}` },
      };
      await instance.patch("/user/profileupdateuser", body, config);
      alert("Data User Updated");
      // buat munculin setelah di update
      const responsUpdatedDataUser = await instance.get(
        "/user/profile",
        config
      );
      console.log(responsUpdatedDataUser);
      setUser(responsUpdatedDataUser.data.data.result[0]);
    } catch (error) {
      alert(error.response.data.message);
    }
  };

  return (
    <>
      <Head>
        <title>profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="logo-enigma.ico" />
      </Head>
      <HStack direction={"row"} justifyContent="space-evenly">
        <Flex direction={"column"}>
          <Text fontSize="4xl" noOfLines={1} position={"center"}>
            {Fullname}
          </Text>
          <Text as="i" position={"center"}>
            {Bio}
          </Text>
          <Button variant={"ghost"} onClick={onOpen}>
            {" "}
            editProfile
          </Button>
          <EditProfile
            isOpen={isOpen}
            onClose={onClose}
            userProfile={user}
            onSaveDataUser={onSaveDataUser}
          />
        </Flex>
        <Flex direction={"column"}>
          <Image
            borderRadius="full"
            src={imagesrc}
            boxSize="200px"
            paddingBottom={2}
          />
          <input type={"file"} onChange={onFileAvachange} />
          <Button variant={"ghost"} onClick={onSaveAvaChange}>
            {" "}
            Save{" "}
          </Button>
        </Flex>
      </HStack>
      <Divider />
      {/* <PostContent /> */}

      <FeedContent
        allPost={allPost}
        allPostedLength={allPostedLength}
        user={user}
      />
    </>
  );
}

// biar seetiap login harus ada session yg isi nya token accsess
export async function getServerSideProps(context) {
  try {
    const session = await getSession({ req: context.req });
    // console.log(session);
    if (!session) return { redirect: { destination: "/login" } };

    const { token } = session.user;
    // console.log({ token });
    const getLimitedShow = 10;
    const getOfSet = 0;
    const config = {
      params: { getLimitedShow, getOfSet },
      headers: { Authorization: `Bearer ${token}` },
    };
    const res = await instance.get("/user/profile", config);
    const responsGetAllPost = await instance.get("/post/GetContent/", config);
    // console.log(responsGetAllPost.data.data.result);
    return {
      props: {
        user: res.data.data.result[0],
        session,
        allPost: responsGetAllPost.data.data.result,
        allPostedLength: responsGetAllPost.data.data.dataLength,
      },
    };
  } catch (error) {
    console.log(error);
    return { props: {} };
  }
}
export default profile;
